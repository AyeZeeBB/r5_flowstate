//script init:
global function PlayLists_Mapnames_Gamemodes_Init

//public:
global function mAssert
global function MapName
global function Playlist
global function Gamemode

//utility:
global function is1v1GameType
global function AllMapsArray
global function AllGamemodesArray
global function AllPlaylistsArray

////////////////////////////////////////////////////////////////////////////////////mkos//
// 									MAPNAME / PLAYLIST INIT								//
//																						//
//		keep these in order with arrays below between shipped builds					//
//																						//
//////////////////////////////////////////////////////////////////////////////////////////

global enum eMaps
{
	mp_rr_arena_composite, //0
	mp_rr_aqueduct, //1
	mp_rr_canyonlands_staging, //2
	mp_rr_canyonlands_64k_x_64k, //3
	mp_rr_canyonlands_mu1, //4
	mp_rr_canyonlands_mu1_night, //5
	mp_rr_desertlands_64k_x_64k, //6
	mp_rr_desertlands_64k_x_64k_nx, //7
	mp_rr_desertlands_64k_x_64k_tt, //8
	mp_rr_party_crasher, //9
	mp_rr_arena_skygarden, //10
	mp_rr_ashs_redemption, //11
	mp_rr_aqueduct_night, //12
	mp_rr_party_crasher_new, //13
	mp_rr_arena_empty, //14
	mp_flowstate, //15
	mp_rr_olympus_mu1, //16
	mp_rr_thepit, //17
	mp_rr_construct_night, //18
	mp_lobby, //19
	mp_rr_habitat, //20
	mp_rr_arena_phase_runner, //21
	mp_rr_desertlands_mu3, //22
	mp_rr_construct, //23
	mp_rr_desertlands_mu1, //24
	mp_rr_canyonlands_mu2, //25
	
	
	_MAP_COUNT //LAST
}

global enum ePlaylists
{
	fs_1v1, //0
	fs_dm, //1
	fs_tdm, //2
	fs_prophunt, //3
	fs_duckhunt, //4
	fs_survival_solos, //5
	fs_survival_duos, //6
	fs_survival_trios, //7
	fs_surf, //8
	fs_movementgym, //9
	fs_infected, //10
	fs_survival, //11
	survival_dev, //12
	custom_ctf, //13
	fs_lgduels_1v1, //14
	fs_scenarios, //15
	fs_haloMod_oddball, //16
	fs_dm_fast_instagib, //17
	fs_snd, //18
	SURVIVAL, //19
	fs_dm_oddball, //20
	fs_fallingforever, //21
	survival_firingrange, //22
	fs_haloMod_ctf, //23
	fs_haloMod, //24
	fs_aimtrainer, //25
	menufall, //26
	flowstate_pkknockback, //27
	fs_movementrecorder, //28
	dev_default, //29
	
	_PLAYLISTS_COUNT //LAST
}

global enum eGamemodes
{
	MENUFALL, //0
	TEAM_DEATHMATCH, //1
	SURVIVAL, //2
	FREELANCE, //3
	CUSTOM_CTF, //4
	fs_dm, //5
	fs_aimtrainer, //6
	fs_prophunt, //7
	fs_duckhunt, //8
	fs_infected, //9
	fs_snd, //10
	flowstate_pkknockback, //11
	map_editor_deprecated, //12
	
	
	_GAMEMODES_COUNT //LAST
}


//keep these in order with enum structs above
struct
{
	array<string> mapNames = [
	
		"mp_rr_arena_composite", //0
		"mp_rr_aqueduct", //1
		"mp_rr_canyonlands_staging", //2
		"mp_rr_canyonlands_64k_x_64k", //3
		"mp_rr_canyonlands_mu1", //4
		"mp_rr_canyonlands_mu1_night", //5
		"mp_rr_desertlands_64k_x_64k", //6
		"mp_rr_desertlands_64k_x_64k_nx", //7
		"mp_rr_desertlands_64k_x_64k_tt", //8
		"mp_rr_party_crasher", //9
		"mp_rr_arena_skygarden", //10
		"mp_rr_ashs_redemption", //11
		"mp_rr_aqueduct_night", //12
		"mp_rr_party_crasher_new", //13
		"mp_rr_arena_empty", //14
		"mp_flowstate", //15
		"mp_rr_olympus_mu1", //16
		"mp_rr_thepit", //17
		"mp_rr_construct_night", //18
		"mp_lobby", //19
		"mp_rr_habitat", //20
		"mp_rr_arena_phase_runner", //21
		"mp_rr_desertlands_mu3", //22
		"mp_rr_construct", //23
		"mp_rr_desertlands_mu1", //24
		"mp_rr_canyonlands_mu2", //25
		
		
		"_MAP_COUNT" //LAST
	]
	
	array<string> playlists = [
		
		"fs_1v1", //0
		"fs_dm", //1
		"fs_tdm", //2
		"fs_prophunt", //3
		"fs_duckhunt", //4
		"fs_survival_solos", //5
		"fs_survival_duos", //6
		"fs_survival_trios", //7
		"fs_surf", //8
		"fs_movementgym", //9
		"fs_infected", //10
		"fs_survival", //11
		"survival_dev", //12
		"custom_ctf", //13
		"fs_lgduels_1v1", //14
		"fs_scenarios", //15
		"fs_haloMod_oddball", //16
		"fs_dm_fast_instagib", //17
		"fs_snd", //18
		"survival", //19 (CONST = SURVIVAL)
		"fs_dm_oddball", //20
		"fs_fallingforever", //21
		"survival_firingrange", //22
		"fs_haloMod_ctf", //23
		"fs_haloMod", //24
		"fs_aimtrainer", //25
		"menufall", //26
		"flowstate_pkknockback", //27
		"fs_movementrecorder", //28
		"dev_default", //29
		
		
		"_PLAYLISTS_COUNT" //LAST
	]
	
	array<string> gamemodes = [
	
		"menufall", //0
		"team_deathmatch", //1
		"survival", //2
		"freelance", //3
		"custom_ctf", //4
		"fs_dm", //5
		"fs_aimtrainer", //6
		"fs_prophunt", //7
		"fs_duckhunt", //8
		"fs_infected", //9
		"fs_snd", //10
		"flowstate_pkknockback", //11
		"map_editor_deprecated", //12
		
		
		"_GAMEMODES_COUNT" //LAST
	
	]
	
	int currentMap = -1
	int currentPlaylist = -1
	int currentGamemode = -1
	
} SH_globals


//this is the global location for defining a mode that is 1v1 based
const array<int> playlist1v1Types = [
	
	ePlaylists.fs_1v1,
	ePlaylists.fs_lgduels_1v1,
]

const array<int> gamemode1v1Types = [

]

void function PlayLists_Mapnames_Gamemodes_Init()
{
	int playlistsArrayCount = SH_globals.playlists.len()
	int playlistsEnumsCount = ( ePlaylists._PLAYLISTS_COUNT + 1 )
	
	int mapnamesArrayCount = SH_globals.mapNames.len()
	int mapnamesEnumsCount = ( eMaps._MAP_COUNT + 1 )
	
	int gamemodesArrayCount = SH_globals.gamemodes.len()
	int gamemodesEnumsCount = ( eGamemodes._GAMEMODES_COUNT + 1 )
	
	mAssert( playlistsArrayCount == playlistsEnumsCount, format( "Playlists not properly configured in enum/array structs: sh_mapname_playlist_gamemode_enums.nut - Array: %d ;Enum: %d ", playlistsArrayCount, playlistsEnumsCount ) )
	mAssert( mapnamesArrayCount == mapnamesEnumsCount, format( "Maps not properly configured in enum/array structs: sh_mapname_playlist_gamemode_enums.nut - Array: %d ;Enum: %d ", mapnamesArrayCount, mapnamesEnumsCount ) )
	mAssert( gamemodesArrayCount == gamemodesEnumsCount, format( "Gaemodes not properly configured in enum/array structs: sh_mapname_playlist_gamemode_enums.nut - Array: %d ;Enum: %d ", gamemodesArrayCount, gamemodesEnumsCount ) )
	
	#if SERVER || CLIENT
	
		SH_globals.currentMap = getMapEnumFromName( GetMapName() )
		mAssert( SH_globals.currentMap != -1, format( "Current map \"%s\" is not registered in sh_mapname_playlist_gamemode_enums.nut", GetMapName() ) )
	#endif
		
	SH_globals.currentPlaylist = getPlaylistEnumFromName( GetCurrentPlaylistName() )	
	mAssert( SH_globals.currentPlaylist != -1, format( "Current playlist \"%s\" is not registered in sh_mapname_playlist_gamemode_enums.nut", GetCurrentPlaylistName() ) )

	#if SERVER || CLIENT
	
		SH_globals.currentGamemode = getGamemodeEnumFromName( GameRules_GetGameMode() )	
		mAssert( SH_globals.currentGamemode != -1, format( "Current gamemode \"%s\" is not registered in sh_mapname_playlist_gamemode_enums.nut", GameRules_GetGameMode() ) )
	#endif
}

int function getMapEnumFromName( string mapString ) 
{
	string mapStringLower = mapString.tolower()
	
	for ( int i = 0; i < eMaps._MAP_COUNT; ++i ) 
	{
		if ( SH_globals.mapNames[i].tolower() == mapStringLower ) 
		{
			return i;
		}
	}
	
	return -1
}

int function getPlaylistEnumFromName( string playlistString ) 
{
	string playlistStringLower = playlistString.tolower()
	
	for ( int i = 0; i < ePlaylists._PLAYLISTS_COUNT; ++i ) 
	{
		if ( SH_globals.playlists[i].tolower() == playlistStringLower ) 
		{
			return i;
		}
	}
	
	return -1
}

int function getGamemodeEnumFromName( string gamemodeString ) 
{
	for ( int i = 0; i < eGamemodes._GAMEMODES_COUNT; ++i ) 
	{
		if ( SH_globals.gamemodes[i] == gamemodeString ) 
		{
			return i;
		}
	}
	
	return -1
}

int function MapName()
{
	return SH_globals.currentMap
}

int function Playlist()
{
	return SH_globals.currentPlaylist
}

int function Gamemode()
{
	return SH_globals.currentGamemode
}

array<string> function AllMapsArray()
{
	return SH_globals.mapNames
}

array<string> function AllGamemodesArray()
{
	return SH_globals.gamemodes
}

array<string> function AllPlaylistsArray()
{
	return SH_globals.playlists
}

bool function is1v1GameType() //use for initializing a local bool setting during startup
{
	if ( playlist1v1Types.contains( Playlist() ) || gamemode1v1Types.contains( Gamemode() ) )
	{
		return true
	}
	
	return false
}

//////////////////////////////////////////
// placing this here temp (mkos Assert) //
//////////////////////////////////////////

void function mAssert( bool condition, string errorMsg = "" )
{
	if ( !condition )
	{
		#if CLIENT
			ErrorClientPlayer( errorMsg )
		#endif 
		
		#if SERVER 		
			ErrorServer( errorMsg )
		#endif
	}
}

#if CLIENT
void function ErrorClientPlayer( string errorMsg )
{
	thread WaitValidPlayerThenError( errorMsg )
}

void function WaitValidPlayerThenError( string errorMsg )
{
	while( !IsValid( GetLocalClientPlayer() ) )
	{
		WaitFrame()
	}
	
	RunUIScript("OpenErrorDialog", errorMsg )
	GetLocalClientPlayer().ClientCommand("disconnect")
}
#endif

#if SERVER
void function ErrorServer( string errorMsg )
{
	thread WaitValidStateThenClose( errorMsg )
}

void function WaitValidStateThenClose( string errorMsg )
{
	wait 1
	/* OnThreadEnd( function() : ( errorMsg )
		{
			throw errorMsg 
		}
	)
	
	WaitForever() */
	
	while ( GetPlayerArray().len() > 0 )
	{
		WaitFrame()
		
		if( GetPlayerArray().len() > 1 )
		{
			break
		}
	}
	
	throw errorMsg
}
#endif 
///