// stub script

global function JumpPad_Init
global function JumpPad_CreatedCallback
global function JumpPadsWeaponJumppad_CreatedCallback

// copied from r5-90 mp_rr_desertlands_common
const float JUMP_PAD_PUSH_RADIUS = 45.0
const float JUMP_PAD_PUSH_PROJECTILE_RADIUS = 32.0//98.0

const float JUMP_PAD_VIEW_PUNCH_SOFT_TITAN = 120.0
const float JUMP_PAD_VIEW_PUNCH_HARD_TITAN = 20.0
const float JUMP_PAD_VIEW_PUNCH_RAND_TITAN = 20.0
const TEAM_JUMPJET_DBL = $"P_team_jump_jet_ON_trails"
const ENEMY_JUMPJET_DBL = $"P_enemy_jump_jet_ON_trails"
const asset JUMP_PAD_MODEL = $"mdl/props/octane_jump_pad/octane_jump_pad.rmdl"

const float JUMP_PAD_ANGLE_LIMIT = 0.70
const float JUMP_PAD_ICON_HEIGHT_OFFSET = 48.0
const float JUMP_PAD_ACTIVATION_TIME = 0.5
const asset JUMP_PAD_LAUNCH_FX = $"P_grndpnd_launch"
const JUMP_PAD_DESTRUCTION = "jump_pad_destruction"

void function JumpPad_Init()
{
	RegisterSignal("JumpPadStart")
  	AddSpawnCallbackEditorClass( "prop_dynamic", "script_survival_jumppad", JumpPad_CreatedCallback )
}

void function JumpPad_GiveDoubleJump( entity player )
{
	if( !IsValid( player) || !player.IsPlayer() )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	
	while( player.IsOnGround() )
		WaitFrame()

	if(!IsValid(player)) return
	
	ItemFlavor playerCharacter = LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_CharacterClass() )
	asset characterSetFile = CharacterClass_GetSetFile( playerCharacter )
	ItemFlavor passive = CharacterClass_GetPassiveAbility( playerCharacter )

	if ( !player.IsOnGround() )
	{
		int health = player.GetHealth()
		int shield = player.GetShieldHealth()
		player.SetPlayerSettingsWithMods( characterSetFile, ["enable_doublejump"] ) // I hate this. Colombia
		if( GameRules_GetGameMode() == SURVIVAL )
			GivePassive( player, CharacterAbility_GetPassiveIndex( passive ) )
		
		if(!IsAlive(player)) return
		player.SetHealth(health)
		player.SetShieldHealth(shield) //set old shieldhealth
	}
	AddButtonPressedPlayerInputCallback( player, IN_JUMP, JumpPad_consumeDoubleJump  )
	
	OnThreadEnd( function() : ( player, characterSetFile, passive )
	{
		if ( !IsValid( player ) )
			return
	
		StopSoundOnEntity( player, "jumpjet_jet_body_1p" )
		StopSoundOnEntity( player, "jumpjet_jet_body_3p_enemy" )
	
		bool stillHasDoubleJumpMod = false

		foreach( mod in player.GetPlayerSettingsMods() )
			if( mod == "enable_doublejump" )
				stillHasDoubleJumpMod = true

		if ( IsValid( player ) && stillHasDoubleJumpMod )
		{
			int health = player.GetHealth()
			int shield = player.GetShieldHealth()
			player.SetPlayerSettingsWithMods( characterSetFile, [] ) // I hate this. Colombia
			if( GameRules_GetGameMode() == SURVIVAL )
				GivePassive( player, CharacterAbility_GetPassiveIndex( passive ) )
			
			if(!IsAlive(player)) return
			player.SetHealth(health)
			player.SetShieldHealth(shield)
			RemoveButtonPressedPlayerInputCallback( player, IN_JUMP, JumpPad_consumeDoubleJump  )
		}
	})

	while ( IsValid(player) && !player.IsOnGround() && !player.IsZiplining() && !Bleedout_IsBleedingOut( player ) )
	{
		WaitFrame()
	}
}

void function JumpPad_consumeDoubleJump( entity player )
{
	player.SetVelocity( player.GetVelocity() + player.GetUpVector() * 100 ) 
	
	ItemFlavor playerCharacter = LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_CharacterClass() )
	asset characterSetFile = CharacterClass_GetSetFile( playerCharacter )
	ItemFlavor passive = CharacterClass_GetPassiveAbility( playerCharacter )
	
	int health = player.GetHealth()
	int shield = player.GetShieldHealth()
	player.SetPlayerSettingsWithMods( characterSetFile, [] )
	if( GameRules_GetGameMode() == SURVIVAL )
		GivePassive( player, CharacterAbility_GetPassiveIndex( passive ) )
			
	if(!IsAlive(player)) return
	player.SetHealth(health)
	player.SetShieldHealth(shield)
	EmitSoundOnEntityOnlyToPlayer( player, player, "jumpjet_jet_body_1p" )
	EmitSoundOnEntityExceptToPlayer( player, player, "jumpjet_jet_body_3p_enemy" )
	
	RemoveButtonPressedPlayerInputCallback( player, IN_JUMP, JumpPad_consumeDoubleJump  )
}

const float JUMP_PAD_PUSH_VELOCITY = 1200
const float JUMP_PAD_VIEW_PUNCH_SOFT = 35.0
const float JUMP_PAD_VIEW_PUNCH_HARD = 4.0
const float JUMP_PAD_VIEW_PUNCH_RAND = 4.0

void function JumpPad_CreatedCallback( entity jumpPad )
{

	vector origin = jumpPad.GetOrigin() // should this allow weapon_jump_pad to be OriginToGround
	vector angles = jumpPad.GetAngles()

	entity mover = CreateScriptMover( jumpPad.GetOrigin(), angles )

	if( IsValid( jumpPad.GetParent() ) )
	{
		mover.SetParent( jumpPad.GetParent() )
	}
	jumpPad.SetParent( mover )
	
	thread JumpPad_PlayAnims( jumpPad, mover )
	
	entity trigger = CreateEntity( "trigger_cylinder_heavy" )	
	trigger.SetOwner( jumpPad )
	trigger.SetRadius( JUMP_PAD_PUSH_RADIUS )
	trigger.SetAboveHeight( 32 )
	trigger.SetBelowHeight( 16 ) //need this because the player or jump pad can sink into the ground a tiny bit and we check player feet not half height
	trigger.SetOrigin( origin )
	trigger.SetAngles( angles )
	trigger.SetTriggerType( TT_JUMP_PAD )
	trigger.SetLaunchScaleValues( JUMP_PAD_PUSH_VELOCITY, 1.25 )
	trigger.SetViewPunchValues( JUMP_PAD_VIEW_PUNCH_SOFT, JUMP_PAD_VIEW_PUNCH_HARD, JUMP_PAD_VIEW_PUNCH_RAND )

	trigger.UsePointCollision()
	trigger.kv.triggerFilterNonCharacter = "0"
	DispatchSpawn( trigger )
	trigger.SetEnterCallback( OnJumpPadAreaEnter )
    
	//Need to set parent so the jump trigger is destroyed with the pad entity
	trigger.SetParent( jumpPad )

	// entity traceBlocker = CreateTraceBlockerVolume( trigger.GetOrigin(), 24.0, true, CONTENTS_BLOCK_PING | CONTENTS_NOGRAPPLE, TEAM_MILITIA, "GEYSER_PING_SCRIPT_NAME" ) // todo: replace geyser_ping_script_name --
	// traceBlocker.SetBox( <-192, -192, -16>, <192, 192, 3000> )

	AddEntityCallback_OnDamaged( jumpPad, JumpPad_OnTakeDamage )
	AddEntityCallback_OnKilled( jumpPad, JumpPad_OnDeath )
}

void function JumpPadsWeaponJumppad_CreatedCallback( entity jumpPad )
{
	vector origin = jumpPad.GetOrigin() // should this allow weapon_jump_pad to be OriginToGround
	vector angles = jumpPad.GetAngles()

	entity trigger = CreateEntity( "trigger_cylinder_heavy" )
	trigger.SetOwner( jumpPad )
	trigger.SetRadius( JUMP_PAD_PUSH_RADIUS )
	trigger.SetAboveHeight( 32 )
	trigger.SetBelowHeight( 16 ) //need this because the player or jump pad can sink into the ground a tiny bit and we check player feet not half height
	trigger.SetOrigin( origin )
	trigger.SetAngles( angles )
	trigger.SetTriggerType( TT_JUMP_PAD )
	trigger.SetLaunchScaleValues( JUMP_PAD_PUSH_VELOCITY, 1.20 )
	trigger.SetViewPunchValues( JUMP_PAD_VIEW_PUNCH_SOFT, JUMP_PAD_VIEW_PUNCH_HARD, JUMP_PAD_VIEW_PUNCH_RAND )
	trigger.UsePointCollision()
	trigger.kv.triggerFilterNonCharacter = "0"
	DispatchSpawn( trigger )
	trigger.SetEnterCallback( OnJumpPadAreaEnter )
    
	//Need to set parent so the jump trigger is destroyed with the pad entity
	trigger.SetParent( jumpPad )
}

void function JumpPad_OnDeath( entity ent, var damageInfo )
{
  //todo: Explosion and sound 
  EmitSoundOnEntity( ent, "JumpPad_Explo")
  PlayImpactFXTable( ent.GetOrigin(), ent, "titan_exp_ground" )
}

void function JumpPad_OnTakeDamage( entity ent, var damageInfo )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	printt("JumpPad_OnTakeDamage. HP", ent.GetHealth())

	if ( IsValid( attacker ) && attacker.IsPlayer() )
	{
		PlayerDamageFeedback( ent, damageInfo, 0 )
		UpdateDamageState( ent, damageInfo )
	}
}

void function JumpPad_PlayAnims( entity jumpPad, entity mover )
{
  EmitSoundOnEntity( jumpPad, "JumpPad_Deploy_Unpack" )
  PlayAnim( jumpPad, "prop_octane_jump_pad_deploy", mover )
  PlayAnim( jumpPad, "prop_octane_jump_pad_deploy_idle", mover )   
}

void function JumpPad_PlayLaunchAnim( entity trigger )
{
	entity jumpPad = trigger.GetOwner()
	entity mover = jumpPad.GetParent()

	PlayAnim( jumpPad, "prop_octane_jump_pad_deploy_trans", mover )
}

void function OnJumpPadAreaEnter( entity trigger, entity ent )
{
	if( !IsValid( ent ) || !ent.IsPlayer() )
		return

	TrackingVision_CreatePOI( eTrackingVisionNetworkedPOITypes.PLAYER_TRAVERSAL_LAUNCH_PAD, ent, ent.GetOrigin(), ent.GetTeam(), ent )
	
	thread JumpPad_PlayLaunchAnim( trigger )
	JumpPadPushEnt( trigger, ent, trigger.GetOrigin(), trigger.GetAngles() )

	ItemFlavor character = LoadoutSlot_GetItemFlavor( ToEHI( ent ), Loadout_CharacterClass() )
	string charRef = ItemFlavor_GetHumanReadableRef( character )

	if( charRef == "character_octane" && Time() - ent.p.lastJumpPadChatterTime >= 30 )
	{
		PlayBattleChatterLineToSpeakerAndTeam( ent, "bc_octane_jumppad_launch" )
		ent.p.lastJumpPadChatterTime = Time()
	}
}

void function JumpPadAirborne( entity player ) {
	if ( !IsPilot( player ) )
		return
	
	//1p sound playing in cl_jump_pads
	EmitSoundOnEntityExceptToPlayer( player, player, "JumpPad_LaunchPlayer_3p" )
	EmitSoundOnEntityExceptToPlayer( player, player, "JumpPad_Ascent_Windrush" )
	
	EmitSoundOnEntity( player, "JumpPad_AirborneMvmt_3p" )
	
	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				StopSoundOnEntity( player, "JumpPad_AirborneMvmt_3p" )
				StopSoundOnEntity( player, "JumpPad_Ascent_Windrush" )
			}
		}
	)
	
	// WaitFrame()
	
	while( IsValid(player) && !player.IsOnGround() )
	{
		WaitFrame()
	}
}

void function JumpPadPushEnt( entity trigger, entity ent, vector origin, vector angles )
{
	if ( JumpPad_ShouldPushPlayerOrNPC( ent ) )
	{
		if ( ent.IsPlayer() )
		{
			entity jumpPad = trigger.GetOwner()
			if ( IsValid( jumpPad ) )
			{
				if ( !Bleedout_IsBleedingOut( ent ) && GameRules_GetGameMode() != "fs_duckhunt")
				{
					thread JumpPad_GiveDoubleJump( ent )
				}
				
				int fxId = GetParticleSystemIndex( JUMP_PAD_LAUNCH_FX )
				StartParticleEffectOnEntity( jumpPad, fxId, FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
			}
			thread JumpPadAirborne( ent )
			// thread Geyser_JumpJetsWhileAirborne( ent ) // no
		}
		else
		{
			EmitSoundOnEntity( ent, "JumpPad_LaunchPlayer_3p" )
			EmitSoundOnEntity( ent, "JumpPad_AirborneMvmt_3p" )
		}
	}
}

bool function JumpPad_ShouldPushPlayerOrNPC( entity target )
{
	if ( target.IsTitan() )
		return false

	if ( IsSuperSpectre( target ) )
		return false

	if ( IsTurret( target ) )
		return false

	if ( IsDropship( target ) )
		return false

	return true
}
